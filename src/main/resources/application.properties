# \u670D\u52A1\u5668\u8BBF\u95EE\u7AEF\u53E3
server.port=8005
# \u6570\u636E\u5E93\u57FA\u672C\u914D\u7F6E
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/testdb?useUnicode=true&characterEncoding=utf-8&useSSL=false\
  &serverTimezone=Asia/Shanghai
spring.datasource.username=test
spring.datasource.password=test888
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.database=MYSQL
# \u663E\u793A\u540E\u53F0\u5904\u7406\u7684SQL\u8BED\u53E5
spring.jpa.show-sql=true
# \u81EA\u52A8\u68C0\u67E5\u5B9E\u4F53\u548C\u6570\u636E\u5E93\u8868\u662F\u5426\u4E00\u81F4\uFF0C\u5982\u679C\u4E0D\u4E00\u81F4\u5219\u4F1A\u8FDB\u884C\u66F4\u65B0\u6570\u636E\u5E93\u8868
# Hibernate ddl auto (create, create-drop, update)
# Using the hibernate configuration ddl-auto = update the database schema will be automatically created (and updated), creating tables and columns, accordingly to java entities found in the project.
spring.jpa.hibernate.ddl-auto=update

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = cn.tekin.jpa.dialect.Mysql5InnodbUtf8

